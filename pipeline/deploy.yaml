parameters:
- name: action
  displayName: action
  type: string
  default: plan
  values:
  - plan
  - apply
  - destroy


trigger: none

pool:
  vmImage: ubuntu-latest

variables:
  - group: Sandpit-Global

stages:
- stage: Build
  jobs:
  - job: generateTimestampTag
    displayName: 'Generate timestamp tag'
    steps:
    - checkout: self
    - script: echo "##vso[task.setvariable variable=timestampTag;]$(date +'%D %T')"

  - job: 'generateRepositoryTag'
    dependsOn: generateTimestampTag
    displayName: 'Generate repository tag'
    steps:
    - script: echo "##vso[task.setvariable variable=repositoryTag;]$(Build.Repository.Name)"

  - job: replaceTokens
    displayName: 'Replace Tokens'
    dependsOn:
      - generateTimestampTag
      - generateRepositoryTag
    steps:
    - task: qetza.replacetokens.replacetokens-task.replacetokens@6
      inputs:
        sources: '**/*.bicepparam'
        actionOnMissing: 'warn'
        tokenPrefix: '#{'
        tokenSuffix: '}#'
    - script: |
        echo printing bicepparam files...\n
        find . -name "*.bicepparam" -exec sh -c 'echo "##########\nFile: $1\n##########"; cat "$1"' sh {} \;
  
  # - job: publishArtifacts
  #   displayName: 'Publish artifacts'
  #   dependsOn: replaceTokens
  #   steps:
  #   - publish: $(System.DefaultWorkingDirectory)/$(Build.Repository.Name)
  #     artifact: repo

- stage: Validate
  jobs:
  - job: validateResourceGroupBicep
    displayName: vaidate resourceGroup.bicep
    steps:
    - task: AzureResourceManagerTemplateDeployment@3
      inputs:
        connectedServiceName: $(serviceconnectionName)
        deploymentName: '$(Build.Repository.Name)_$(Build.BuildNumber)'
        location: $(deploymentDefaultLocation)
        deploymentScope: Subscription
        subscriptionId: $(subscriptionID)
        csmFile: resourceGroup.bicep
        deploymentMode: Validate
        overrideParameters: |
          -coreRGName $(coreRGName)
          -location $(location)

  - job: validateNetworkBicep
    displayName: vaidate network.bicep
    dependsOn: validateResourceGroupBicep
    steps:
    - task: AzureResourceManagerTemplateDeployment@3
      inputs:
        connectedServiceName: $(serviceconnectionName)
        deploymentName: '$(Build.Repository.Name)_$(Build.BuildNumber)'
        location: $(deploymentDefaultLocation)
        deploymentScope: 'Resource Group'
        resourceGroupName: $(resourceGroupName)
        csmFile: resourceGroup.bicep
        deploymentMode: Validate
        overrideParameters: |
          -vnetName $(vnetName)
          -location $(location)
          -vnetPrefix $(vnetPrefix)
          -appSubnetName $(appSubnetName)
          -appSubnetPrefix $(appSubnetPrefix)
          -dataSubnetName $(dataSubnetName)
          -dataSubnetPrefix $(dataSubnetPrefix)
  
  - job: publishArtifacts
    displayName: publish artifacts
    dependsOn: validateNetworkBicep
    steps:
    - publish: $(System.DefaultWorkingDirectory)
      artifact: validatedBicep
      
# - Stage: Plan
#   condition: and(succeeded(), eq('${{ parameters.action }}', 'plan'))

      # Needs to be scriptes as AzureResourceManagerTemplateDeployment tasks don't support what-if

- stage: Apply
  condition: and(succeeded(), eq('${{ parameters.action }}', 'apply'))
  jobs:
  - job: applyResourceGroupBicep
    displayName: apply resourceGroup.bicep
    steps:
    - download: current
      artifact: validatedBicep
    - task: AzureResourceManagerTemplateDeployment@3
      inputs:
        connectedServiceName: $(serviceconnectionName)
        deploymentName: '$(Build.Repository.Name)_$(Build.BuildNumber)'
        location: $(deploymentDefaultLocation)
        deploymentScope: Subscription
        subscriptionId: $(subscriptionID)
        csmFile: resourceGroup.bicep
        deploymentMode: Validate
        overrideParameters: |
          -coreRGName $(coreRGName)
          -location $(location)

  - job: applyNetworkBicep
    displayName: apply network.bicep
    dependsOn: applyResourceGroupBicep
    steps:
    - download: current
      artifact: validatedBicep
    - task: AzureResourceManagerTemplateDeployment@3
      inputs:
        connectedServiceName: $(serviceconnectionName)
        deploymentName: '$(Build.Repository.Name)_$(Build.BuildNumber)'
        location: $(deploymentDefaultLocation)
        deploymentScope: 'Resource Group'
        resourceGroupName: $(resourceGroupName)
        csmFile: resourceGroup.bicep
        deploymentMode: Incremental
        overrideParameters: |
          -vnetName $(vnetName)
          -location $(location)
          -vnetPrefix $(vnetPrefix)
          -appSubnetName $(appSubnetName)
          -appSubnetPrefix $(appSubnetPrefix)
          -dataSubnetName $(dataSubnetName)
          -dataSubnetPrefix $(dataSubnetPrefix)

- stage: Destroy
  condition: and(succeeded(), eq('${{ parameters.action }}', 'destroy'))
  jobs:
  - job: destroyResourceGroupBicep
    displayName: vaidate resourceGroup.bicep
    steps:
    - download: current
      artifact: validatedBicep
    - task: AzureResourceManagerTemplateDeployment@3
      inputs:
        connectedServiceName: $(serviceconnectionName)
        deploymentName: '$(Build.Repository.Name)_$(Build.BuildNumber)'
        location: $(deploymentDefaultLocation)
        deploymentScope: Subscription
        subscriptionId: $(subscriptionID)
        csmFile: resourceGroup.bicep
        deploymentMode: Validate
        overrideParameters: |
          -coreRGName $(coreRGName)
          -location $(location)

  # - job: destroy_Network_bicep
  #   displayName: destroy network.bicep
  #   dependsOn: destroy_ResourceGroup_bicep
  #   steps:
  #   - task: AzureResourceManagerTemplateDeployment@3
  #     inputs:
  #       connectedServiceName: $(serviceconnectionName)
  #       deploymentName: '$(Build.Repository.Name)_$(Build.BuildNumber)'
  #       location: $(deploymentDefaultLocation)
  #       deploymentScope: 'Resource Group'
  #       resourceGroupName: $(resourceGroupName)
  #       csmFile: resourceGroup.bicep
  #       deploymentMode: Incremental
  #       overrideParameters: |
  #         -vnetName $(vnetName)
  #         -location $(location)
  #         -vnetPrefix $(vnetPrefix)
  #         -appSubnetName $(appSubnetName)
  #         -appSubnetPrefix $(appSubnetPrefix)
  #         -dataSubnetName $(dataSubnetName)
  #         -dataSubnetPrefix $(dataSubnetPrefix)

# - Stage: Destroy
#   # Powershell script to destroy resource group
